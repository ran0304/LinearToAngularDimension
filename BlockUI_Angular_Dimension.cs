//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  D:\Learning_Ranjeet\NX_Custom\Practice\BlockUI_Linear_To_Angular_Dimension\BlockUI_Angular_Dimension.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: Admin
//              Version: NX 12
//              Date: 07-19-2021  (Format: mm-dd-yyyy)
//              Time: 23:49 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.Annotations;
using NXOpen.BlockStyler;
using NXOpen.Drawings;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class BlockUI_Angular_Dimension
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.Group group;// Block type: Group
    private NXOpen.BlockStyler.SelectObject selection1;// Block type: Selection
    private NXOpen.BlockStyler.SelectObject selection2;// Block type: Selection
    private NXOpen.BlockStyler.Group group1;// Block type: Group
    private NXOpen.BlockStyler.DoubleBlock drumDia;// Block type: Double
    private NXOpen.BlockStyler.Group group2;// Block type: Group
    private NXOpen.BlockStyler.Enumeration toleranceType;// Block type: Enumeration
    private NXOpen.BlockStyler.Enumeration angleUnit;// Block type: Enumeration
    private NXOpen.BlockStyler.IntegerBlock tolerance1;// Block type: Integer
    private NXOpen.BlockStyler.SpecifyLocation cursorLocation0;// Block type: Specify Cursor Location
    public static bool IsFirstTime = true;
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public BlockUI_Angular_Dimension()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = @"D:\Learning_Ranjeet\NX_Custom\Practice\BlockUI_Linear_To_Angular_Dimension\BlockUI_Angular_Dimension.dlx";
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddCancelHandler(new NXOpen.BlockStyler.BlockDialog.Cancel(cancel_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    public static void Main()
    {
        BlockUI_Angular_Dimension theBlockUI_Angular_Dimension = null;
        try
        {
            theBlockUI_Angular_Dimension = new BlockUI_Angular_Dimension();
            // The following method shows the dialog immediately
            theBlockUI_Angular_Dimension.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            if(theBlockUI_Angular_Dimension != null)
                theBlockUI_Angular_Dimension.Dispose();
                theBlockUI_Angular_Dimension = null;
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
            selection1 = (NXOpen.BlockStyler.SelectObject)theDialog.TopBlock.FindBlock("selection1");
            selection2 = (NXOpen.BlockStyler.SelectObject)theDialog.TopBlock.FindBlock("selection2");
            drumDia = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("drumDia");
            group2 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group2");
            toleranceType = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("toleranceType");
            angleUnit = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("angleUnit");
            tolerance1 = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("tolerance1");
            cursorLocation0 = (NXOpen.BlockStyler.SpecifyLocation)theDialog.TopBlock.FindBlock("cursorLocation0");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            if (IsFirstTime)
            {
                tolerance1.Value = 0;
                drumDia.Value = 0;
            }

        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
            Part workPart = theSession.Parts.Work;
            string[] symbolHUnilateralDegree = new string[1];
            symbolHUnilateralDegree[0] = "<C2.000><H><$s><H><C>";
            string[] symbolLUnilateralDegree = new string[1];
            symbolLUnilateralDegree[0] = "<C2.000><L><$s><L><C>";

            string[] symbolHUnilateralMinutes = new string[1];
            symbolHUnilateralMinutes[0] = "<C><C2.00><H>'<H><C>";
            string[] symbolLUnilateralMinutes = new string[1];
            symbolLUnilateralMinutes[0] = "<C><C2.00><L>'<L><C>";

            Session.UndoMarkId markId1 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start");

            Dimension dim = null;
            LinearDimensionBuilder linearDimensionBuilder1 = workPart.Dimensions.CreateLinearDimensionBuilder(dim);

            theSession.SetUndoMarkName(markId1, "Linear Dimension Dialog");

            foreach (DraftingView view in workPart.DraftingViews)
            {
                TaggedObject[] taggedObj1 = selection1.GetSelectedObjects();
                foreach (NXObject NxObj in taggedObj1)
                {
                    NXObject draftingCurve1 = (NXObject)NXOpen.Utilities.NXObjectManager.Get(NxObj.Tag);
                    linearDimensionBuilder1.FirstAssociativity.SetValue(InferSnapType.SnapType.End, draftingCurve1, view, new Point3d(0, 0, 0), null, null, new Point3d(0, 0, 0));
                }

                TaggedObject[] taggedObj2 = selection2.GetSelectedObjects();
                foreach (NXObject NxObj in taggedObj2)
                {
                    NXObject draftingCurve2 = (NXObject)NXOpen.Utilities.NXObjectManager.Get(NxObj.Tag);
                    linearDimensionBuilder1.SecondAssociativity.SetValue(InferSnapType.SnapType.End, draftingCurve2, view, new Point3d(0, 0, 0), null, null, new Point3d(0, 0, 0));
                }
            }

            linearDimensionBuilder1.Measurement.Method = DimensionMeasurementBuilder.MeasurementMethod.Inferred;

            double x = cursorLocation0.CursorLocation.X;
            double y = cursorLocation0.CursorLocation.Y;
            double z = cursorLocation0.CursorLocation.Z;

            linearDimensionBuilder1.Origin.Origin.SetValue(null, null, new Point3d(x, y, z));
            //Dimension formatting
            linearDimensionBuilder1.Style.UnitsStyle.DecimalPointCharacter = DecimalPointCharacter.Period;
            linearDimensionBuilder1.Style.LineArrowStyle.FirstPosToExtensionLineDistance = 1;
            linearDimensionBuilder1.Style.LineArrowStyle.SecondPosToExtensionLineDistance = 1;
            linearDimensionBuilder1.Style.LineArrowStyle.ArrowheadLength = 3;
            linearDimensionBuilder1.Style.LineArrowStyle.ArrowheadIncludedAngle = 20;
            linearDimensionBuilder1.Style.LineArrowStyle.FirstArrowheadColor = workPart.Colors.Find("Strong Forest");
            linearDimensionBuilder1.Style.LineArrowStyle.FirstArrowLineColor = workPart.Colors.Find("Strong Forest");
            linearDimensionBuilder1.Style.LineArrowStyle.FirstExtensionLineColor = workPart.Colors.Find("Strong Forest");
            linearDimensionBuilder1.Style.LineArrowStyle.SecondArrowheadColor = workPart.Colors.Find("Strong Forest");
            linearDimensionBuilder1.Style.LineArrowStyle.SecondArrowLineColor = workPart.Colors.Find("Strong Forest");
            linearDimensionBuilder1.Style.LineArrowStyle.SecondExtensionLineColor = workPart.Colors.Find("Strong Forest");
            linearDimensionBuilder1.Style.LetteringStyle.DimensionTextSize = 3;
            linearDimensionBuilder1.Style.LetteringStyle.AppendedTextSize = 2;
            linearDimensionBuilder1.Style.LetteringStyle.AppendedTextColor = workPart.Colors.Find("Deep Green");
            linearDimensionBuilder1.Style.LetteringStyle.DimensionTextColor = workPart.Colors.Find("Deep Green");
            linearDimensionBuilder1.Style.LetteringStyle.GeneralTextColor = workPart.Colors.Find("Deep Green");
            linearDimensionBuilder1.Style.LetteringStyle.ToleranceTextColor = workPart.Colors.Find("Deep Green");
            linearDimensionBuilder1.Style.LetteringStyle.DimensionTextFont = 4;
            linearDimensionBuilder1.Style.LetteringStyle.AppendedTextFont = 4;
            linearDimensionBuilder1.Style.LetteringStyle.ToleranceTextFont = 4;
            linearDimensionBuilder1.Style.LetteringStyle.DimensionTextCharSpaceFactor = 1;
            linearDimensionBuilder1.Style.LetteringStyle.AppendedTextCharSpaceFactor = 1;
            linearDimensionBuilder1.Style.LetteringStyle.ToleranceTextCharSpaceFactor = 1;
            linearDimensionBuilder1.Style.LetteringStyle.ToleranceTextSpaceFactor = 0.5;
            linearDimensionBuilder1.Style.LetteringStyle.AppendedTextSpaceFactor = 0.3;


            // To select tolerance type
            if (toleranceType.ValueAsString == "No Tolerance")
            {
                string[] noAppend = new string[1];
                noAppend[0] = "";
                linearDimensionBuilder1.Style.DimensionStyle.ToleranceType = ToleranceType.None;
                linearDimensionBuilder1.AppendedText.SetAfter(noAppend);
            }
            else if (toleranceType.ValueAsString == "Equal Bilateral Tolerance")
            {
                linearDimensionBuilder1.Style.DimensionStyle.ToleranceType = ToleranceType.BilateralOneLine;
                linearDimensionBuilder1.Style.LetteringStyle.ToleranceTextSize = 2;
                linearDimensionBuilder1.Style.DimensionStyle.UpperToleranceMetric = tolerance1.Value;

                if (angleUnit.ValueAsString == "Degree")
                {
                    string[] symbolEqualBilateralDegree = new string[1];
                    symbolEqualBilateralDegree[0] = "<C><C1.2500><$s><C>";
                    linearDimensionBuilder1.AppendedText.SetAfter(symbolEqualBilateralDegree);
                }
                else if (angleUnit.ValueAsString == "Minutes")
                {
                    string[] symbolEqualBilateralMinutes = new string[1];
                    symbolEqualBilateralMinutes[0] = "<C><C1.2500>'<C>";
                    linearDimensionBuilder1.AppendedText.SetAfter(symbolEqualBilateralMinutes);
                }
            }
            else if (toleranceType.ValueAsString == "Bilateral Tolerance")
            {
                linearDimensionBuilder1.Style.DimensionStyle.ToleranceType = ToleranceType.BilateralTwoLines;
                linearDimensionBuilder1.Style.LetteringStyle.TwoLineToleranceTextSize = 2;
                linearDimensionBuilder1.Style.DimensionStyle.UpperToleranceMetric = tolerance1.Value;
                linearDimensionBuilder1.Style.DimensionStyle.LowerToleranceMetric = -tolerance1.Value;

                if (angleUnit.ValueAsString == "Degree")
                {
                    linearDimensionBuilder1.AppendedText.SetAfter(symbolHUnilateralDegree);
                    linearDimensionBuilder1.AppendedText.SetAfter(symbolLUnilateralDegree);
                }

                else if (angleUnit.ValueAsString == "Minutes")
                {
                    linearDimensionBuilder1.AppendedText.SetAfter(symbolHUnilateralMinutes);
                    linearDimensionBuilder1.AppendedText.SetAfter(symbolLUnilateralMinutes);
                }
            }
            else if (toleranceType.ValueAsString == "Unilateral +")
            {
                linearDimensionBuilder1.Style.DimensionStyle.ToleranceType = ToleranceType.UnilateralAbove;
                linearDimensionBuilder1.Style.LetteringStyle.TwoLineToleranceTextSize = 2;
                linearDimensionBuilder1.Style.DimensionStyle.UpperToleranceMetric = tolerance1.Value;
                linearDimensionBuilder1.Style.DimensionStyle.LowerToleranceMetric = 0;

                if (angleUnit.ValueAsString == "Degree")
                {
                    linearDimensionBuilder1.AppendedText.SetAfter(symbolHUnilateralDegree);
                }
                else if (angleUnit.ValueAsString == "Minutes")
                {
                    linearDimensionBuilder1.AppendedText.SetAfter(symbolHUnilateralMinutes);
                }
            }
            else if (toleranceType.ValueAsString == "Unilateral -")
            {
                linearDimensionBuilder1.Style.DimensionStyle.ToleranceType = ToleranceType.UnilateralBelow;
                linearDimensionBuilder1.Style.LetteringStyle.TwoLineToleranceTextSize = 2;
                linearDimensionBuilder1.Style.DimensionStyle.LowerToleranceMetric = -tolerance1.Value;

                if (angleUnit.ValueAsString == "Degree")
                {
                    linearDimensionBuilder1.AppendedText.SetAfter(symbolLUnilateralDegree);
                }
                else if (angleUnit.ValueAsString == "Minutes")
                {
                    linearDimensionBuilder1.AppendedText.SetAfter(symbolLUnilateralMinutes);
                }
            }
            toleranceType.ValueAsString = "No Tolerance";
            angleUnit.ValueAsString = "Degree";


            Session.UndoMarkId markId2 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Dimension Overriden");

            NXObject nXObject1 = linearDimensionBuilder1.Commit();
            Dimension angularDimension1 = (Dimension)workPart.FindObject(nXObject1.JournalIdentifier);

            string[] dimText;
            string[] dualDimText;
            angularDimension1.GetDimensionText(out dimText, out dualDimText);
            //theUI.NXMessageBox.Show("Dimension Text", NXMessageBox.DialogType.Information, dimText[0]);			

            double perim1 = AnglePerUnit(drumDia.Value);
            string[] value = new string[1];
            value[0] = Math.Round(Convert.ToDouble(dimText[0]) * perim1, 1).ToString() + "<$s>";

            Session.UndoMarkId markId4 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "Appended Text Settings");

            angularDimension1.SetDimensionText(value);
            linearDimensionBuilder1.Destroy();

            Session.UndoMarkId markId3 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Overriden finshed");
            theSession.UpdateManager.DoUpdate(markId3);
            IsFirstTime = false;

        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }

    public static double AnglePerUnit(double dia)
    {
        double perim = Math.PI * dia;
        double angleEquivalentToOnemm = 360 / perim;
        return angleEquivalentToOnemm;
    }

    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == selection1)
            {
            //---------Enter your code here-----------
            }
            else if(block == selection2)
            {
            //---------Enter your code here-----------
            }
            else if(block == drumDia)
            {
            //---------Enter your code here-----------
            }
            else if(block == toleranceType)
            {
            //---------Enter your code here-----------
            }
            else if(block == angleUnit)
            {
            //---------Enter your code here-----------
            }
            else if(block == tolerance1)
            {
            //---------Enter your code here-----------
            }
            else if(block == cursorLocation0)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: cancel_cb
    //------------------------------------------------------------------------------
    public int cancel_cb()
    {
        try
        {

        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist =null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }
    
}
